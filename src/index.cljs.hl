(page "index.html"
  (:require [adzerk.cljs-console :as log :include-macros true]
            [instaparse.core :as insta]
            [lbbasic.compiler :as c]
            [lbbasic.vm :as vm]))

(def banner
  ;;{{
  Little Bird Basic
    __
   ( ->
   / )\
  <_/_/
  ;;}}
  )

(defn push
  [v max-size x]
  (conj (if (= (count v) max-size) (subvec v 1) v) x))

(defelem console-output
  [{:keys [lines] :as attrs}]
  (let [elems (cell= (interpose \newline lines))]
    (with-let [area (textarea (dissoc attrs :lines-cell)
                      (for-tpl [x elems]
                        (text x)))]
      (let [area$ (js/jQuery area)]
        (add-watch elems ::console-output
                   (fn [& _]
                     ;; Note: Ideally this would run only after for-tpl has done
                     ;; its business. I'm not sure it necessarily does.
                     (.scrollTop area$ (.prop area$ "scrollHeight"))))))))

(def lines (cell []))
(def +max-lines+ 100)
(def output-area (console-output :id "output"
                                 :lines lines
                                 :disabled "true"))

(defc prompt-message nil)

(defn println!
  ([] (println! ""))
  ([l] (swap! lines push +max-lines+ l)))

(def vm (cell (vm/make-vm {:printfn println!})))

(with-init!
  ;; (println! banner)
  ;; (println!)
  (println! "Ready.")
  ;; Install Escape-key break handler
  (.on (js/jQuery js/document)
       "keyup"
       #(when (= (.-keyCode %) 27)
          (vm/break! @vm))))

(defn handle-input
  [line]
  ;; TODO handle top-level commands before parsing
  (let [parsed (insta/parse c/parser line)]
    (if (insta/failure? parsed)
      (swap! lines str "ERROR: " (pr-str (insta/get-failure parsed)))
      (let [stmts (c/statements parsed)
            linum (c/linum parsed)
            code  (c/compile stmts)]
        (println! line)
        (println parsed)
        (println (c/pr-asm code))
        (if linum
          ;; deferred execution
          (vm/load! @vm linum code)
          ;; immediate execution
          (try
            (doto @vm
              (vm/load! -1 code)
              (vm/run! -1))
            (catch ExceptionInfo e
              (println! (str "ERROR: " (.-message e) " - " (pr-str (ex-data e)))))))))))

(html
  (head
    (title "Little Bird Basic")
    (link :href "app.css" :rel "stylesheet"))
  (body
    output-area
    ;; (textarea
    ;;   :scroll-write lines
    ;;   :id "output"
    ;;   :disabled "true")
    (let [input-line (cell nil)]
      (form {:autocomplete "off"
             :id "input"
             :submit (fn [e]
                       (if-not (empty? @input-line)
                         (handle-input @input-line))
                       (reset! input-line nil))}
        (span :id "prompt-message" prompt-message)
        (span :id "prompt" "âžœ")
        (with-let [elem (input {:id "line-input"
                                :type "text"
                                :value input-line
                                :change #(reset! input-line @%)})]
          (with-init! (.focus elem)))))))
