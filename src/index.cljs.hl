(page "index.html"
  (:require [adzerk.cljs-console :as log :include-macros true]
            [instaparse.core :as insta]
            [lbbasic.compiler :as c]
            [lbbasic.vm :as vm]))

(def banner
  ;;{{
  ;;}}
  )

(def lines (cell nil))
(defc prompt-message nil)

(defn print! [s]
  (swap! lines #(str % s)))

(defn println!
  ([] (println! nil))
  ([l] (print! (str l "\n"))))

(defmethod hoplon.core/do! :scroll-write
  [elem _ str-cell]
  (let [elem$ (js/jQuery elem)]
    (.scrollTop elem$ (.prop elem$ "scrollHeight"))
    (.val elem$ str-cell)))

(def vm (cell (vm/make-vm {:printfn println!})))

(with-init!
  (println! banner)
  (println!)
  (println! "Ready.")
  ;; Install Escape-key break handler
  (.on (js/jQuery js/document)
       "keyup"
       #(when (= (.-keyCode %) 27)
          (vm/break! @vm))))

(defn handle-input
  [line]
  ;; TODO handle top-level commands before parsing
  (let [parsed (insta/parse c/parser line)]
    (if (insta/failure? parsed)
      (swap! lines str "ERROR: " (pr-str (insta/get-failure parsed)))
      (let [stmts (c/statements parsed)
            linum (c/linum parsed)
            code  (c/compile stmts)]
        (println! line)
        (println parsed)
        (println (c/pr-asm code))
        (if linum
          ;; deferred execution
          (vm/load! @vm linum code)
          ;; immediate execution
          (try
            (doto @vm
              (vm/load! -1 code)
              (vm/run! -1))
            (catch ExceptionInfo e
              (println! (str "ERROR: " (.-message e) " - " (pr-str (ex-data e)))))))))))

(html
  (head
    (title "Little Bird Basic")
    (link :href "app.css" :rel "stylesheet"))
  (body
    (textarea
      :scroll-write lines
      :id "output"
      :disabled "true")
    (let [input-line (cell nil)]
      (form {:autocomplete "off"
             :id "input"
             :submit (fn [e]
                       (if-not (empty? @input-line)
                         (handle-input @input-line))
                       (reset! input-line nil))}
        (span :id "prompt-message" prompt-message)
        (span :id "prompt" "âžœ")
        (with-let [elem (input {:id "line-input"
                                :type "text"
                                :value input-line
                                :change #(reset! input-line @%)})]
          (with-init! (.focus elem)))))))
