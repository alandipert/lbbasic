(page "index.html"
  (:require [adzerk.cljs-console :as log :include-macros true]
            [instaparse.core :as insta]
            [lbbasic.compiler :as c]
            [lbbasic.vm :as vm]))

(def banner
  ;;{{
  Little Bird Basic
    __
   ( ->
   / )\
  <_/_/
  ;;}}
  )

(defn push
  [v max-size x]
  (conj (if (= (count v) max-size) (subvec v 1) v) x))

(defelem console-output
  [{:keys [lines] :as attrs}]
  (let [elems (cell= (interpose \newline lines))]
    (textarea (dissoc attrs :lines)
      (for-tpl [x elems]
        (text x)))))

(defn removeChildNative [obj child]
  (.call @#'hoplon.core/removeChild obj child))

(defn appendChildNative [obj child]
  (.call @#'hoplon.core/appendChild obj child))

(defelem line-printer
  [{:keys [max-rows] :or {max-rows 10} :as attrs} _]
  (let [area (textarea (dissoc attrs max-rows))]
    {:println! (fn println!
                 ([] (println! ""))
                 ([line]
                  (let [n (.. area -childNodes -length)]
                    (if (= n 0)
                      (appendChildNative area (.createTextNode js/document (str line)))
                      (let [last-line (aget (.-childNodes area) (dec n))]
                        (set! (.-textContent last-line) (str (.-textContent last-line) \newline))
                        (appendChildNative area (.createTextNode js/document (str line)))
                        (when (= n max-rows) (removeChildNative area (aget (.-childNodes area) 0))))))
                  (set! (.-scrollTop area) (.-scrollHeight area))))
     :textarea area}))

(let [printer (line-printer :max-rows 1000 :id "output")]
  (def output-area (:textarea printer))
  (def println! (:println! printer)))

(defc prompt-message nil)

(def vm (cell (vm/make-vm {:printfn println!})))

(with-init!
  ;; (println! banner)
  ;; (println!)
  (println! "Ready.")
  ;; Install Escape-key break handler
  (.on (js/jQuery js/document)
       "keyup"
       #(when (= (.-keyCode %) 27)
          (vm/break! @vm))))

(defn handle-input
  [line]
  ;; TODO handle top-level commands before parsing
  (let [parsed (insta/parse c/parser line)]
    (if (insta/failure? parsed)
      (println! (str "ERROR: " (pr-str (insta/get-failure parsed))))
      (let [stmts (c/statements parsed)
            linum (c/linum parsed)
            code  (c/compile stmts)]
        (println! line)
        (println parsed)
        (println (c/pr-asm code))
        (if linum
          ;; deferred execution
          (vm/load! @vm linum line code)
          ;; immediate execution
          (try
            (doto @vm
              (vm/load! -1 line code)
              (vm/run! -1))
            (catch ExceptionInfo e
              (println! (str "ERROR: " (.-message e) " - " (pr-str (ex-data e)))))))))))

(html
  (head
    (title "Little Bird Basic")
    (link :href "app.css" :rel "stylesheet"))
  (body
    output-area
    ;; (textarea
    ;;   :scroll-write lines
    ;;   :id "output"
    ;;   :disabled "true")
    (let [input-line (cell nil)]
      (form {:autocomplete "off"
             :id "input"
             :submit (fn [e]
                       (if-not (empty? @input-line)
                         (handle-input @input-line))
                       (reset! input-line nil))}
        (span :id "prompt-message" prompt-message)
        (span :id "prompt" "âžœ")
        (with-let [elem (input {:id "line-input"
                                :type "text"
                                :value input-line
                                :change #(reset! input-line @%)})]
          (with-init! (.focus elem)))))))
