(page "index.html"
  (:require [instaparse.core :as insta]
            [lbbasic.vm :as vm]))

(def banner
  ;;{{
  Little Bird Basic
     __
    ( ->
    / )\
   <_/_/
  ;;}}
  )

(defc lines nil)
(defc prompt-message nil)

(defn print! [s]
  (swap! lines #(str % s)))

(defn println!
  ([] (println! nil))
  ([l] (print! (str l "\n"))))

(def parse-line
  (insta/parser
   ;;{{
   line         = (linum whitespace+)? stmt
   linum        = #'(0|([1-9][0-9]*))'
   stmt         = builtin
   expr         = value | var
   (* builtins *)
   builtin      = print | cls
   print        = <'print'> whitespace expr
   cls          = <'cls'>
   (* TODO arithmethic *)
   (* literals *)
   <value>      = string | float | int
   string       = #'\"[^\"]+\"'
   float        = #'[+-]?(0|([1-9][0-9]*))(\.[0-9]+)'
   int          = #'[+-]?(0|([1-9][0-9]*))'
   (* variable names *)
   <var>        = var-float | var-int | var-str
   var-float    = #'[a-zA-Z]+'
   var-int      = #'[a-zA-Z]+\%'
   var-str      = #'[a-zA-Z]+\$'
   (* util *)
   <whitespace> = <#'\s+'>
   ;;}}
   ))

(defn eval
  [prog]
  (let [[x [y & zs]] prog]
    (condp = [x y]
      ;; Builtin statements
      [:stmt :builtin]
      (case (ffirst zs)
        :print (println! (eval (second (first zs))))
        :cls   (reset! lines nil))
      ;; Literals
      [:expr :int] (.parseInt js/window (first zs))
      [:expr :string] (.parse js/JSON (first zs))
      [:expr :float] (.parseFloat js/window (first zs)))))

(with-init!
  (println! banner)
  (println!)
  (println! "Ready.")
  (let [m1 (vm/make-machine {:printfn println})
        m2 (vm/load m1 10 [[:push "hello world"]
                           [:store "X"]
                           [:load "X"]
                           [:print]])
        m3 (vm/load m2 20 [[:push 123]
                           [:dup]
                           [:plus]
                           [:print]
                           [:load "X"]
                           [:dup]
                           [:plus]
                           [:print]])]
    (vm/run m3 10)
    #_(println (dissoc (vm/run1 (vm/run1 (vm/run1 (vm/run1 (vm/run1 m2 10))))) :printfn))
    #_(println m2)))

(defmethod hoplon.core/do! :scroll-write
  [elem _ str-cell]
  (let [elem$ (js/jQuery elem)]
    (.scrollTop elem$ (.prop elem$ "scrollHeight"))
    (.val elem$ str-cell)))

(html
  (head
    (link :href "app.css" :rel "stylesheet"))
  (body
    (textarea
      :scroll-write lines
      :id "output"
      :disabled "true")
    (let [input-line (cell nil)]
      (form {:id "input"
             :submit (fn []
                       (let [[_ x] (parse-line @input-line)]
                         (println (pr-str x))
                         (eval x)
                         ))}
        (span :id "prompt-message" prompt-message)
        (span :id "prompt" "âžœ")
        (with-let [elem (input {:id "line-input"
                                :type "text"
                                :change #(reset! input-line @%)})]
          (with-init! (.focus elem)))))))
